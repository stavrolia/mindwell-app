/**
 * Mindwell
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient

import org.openapitools.client.models.Design
import org.openapitools.client.models.DesignFontsGet200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DesignApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v1")
        }
    }

    /**
     * 
     * 
     * @return DesignFontsGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun designFontsGet() : DesignFontsGet200Response {
        val localVarResponse = designFontsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DesignFontsGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<DesignFontsGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun designFontsGetWithHttpInfo() : ApiResponse<DesignFontsGet200Response?> {
        val localVariableConfig = designFontsGetRequestConfig()

        return request<Unit, DesignFontsGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation designFontsGet
     *
     * @return RequestConfig
     */
    fun designFontsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/design/fonts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return Design
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun designGet() : Design {
        val localVarResponse = designGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Design
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<Design?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun designGetWithHttpInfo() : ApiResponse<Design?> {
        val localVariableConfig = designGetRequestConfig()

        return request<Unit, Design>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation designGet
     *
     * @return RequestConfig
     */
    fun designGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/design",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter textAlignment
     */
     enum class TextAlignment_designPut(val value: kotlin.String) {
         @Json(name = "left") left("left"),
         @Json(name = "right") right("right"),
         @Json(name = "center") center("center"),
         @Json(name = "justify") justify("justify")
     }

    /**
     * 
     * 
     * @param textAlignment 
     * @param css  (optional)
     * @param backgroundColor  (optional, default to "#ffffff")
     * @param textColor  (optional, default to "#000000")
     * @param fontFamily  (optional)
     * @param fontSize  (optional)
     * @return Design
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun designPut(textAlignment: TextAlignment_designPut, css: kotlin.String? = null, backgroundColor: kotlin.String? = "#ffffff", textColor: kotlin.String? = "#000000", fontFamily: kotlin.String? = null, fontSize: kotlin.Int? = null) : Design {
        val localVarResponse = designPutWithHttpInfo(textAlignment = textAlignment, css = css, backgroundColor = backgroundColor, textColor = textColor, fontFamily = fontFamily, fontSize = fontSize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Design
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param textAlignment 
     * @param css  (optional)
     * @param backgroundColor  (optional, default to "#ffffff")
     * @param textColor  (optional, default to "#000000")
     * @param fontFamily  (optional)
     * @param fontSize  (optional)
     * @return ApiResponse<Design?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun designPutWithHttpInfo(textAlignment: TextAlignment_designPut, css: kotlin.String?, backgroundColor: kotlin.String?, textColor: kotlin.String?, fontFamily: kotlin.String?, fontSize: kotlin.Int?) : ApiResponse<Design?> {
        val localVariableConfig = designPutRequestConfig(textAlignment = textAlignment, css = css, backgroundColor = backgroundColor, textColor = textColor, fontFamily = fontFamily, fontSize = fontSize)

        return request<Map<String, PartConfig<*>>, Design>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation designPut
     *
     * @param textAlignment 
     * @param css  (optional)
     * @param backgroundColor  (optional, default to "#ffffff")
     * @param textColor  (optional, default to "#000000")
     * @param fontFamily  (optional)
     * @param fontSize  (optional)
     * @return RequestConfig
     */
    fun designPutRequestConfig(textAlignment: TextAlignment_designPut, css: kotlin.String?, backgroundColor: kotlin.String?, textColor: kotlin.String?, fontFamily: kotlin.String?, fontSize: kotlin.Int?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "css" to PartConfig(body = css, headers = mutableMapOf()),
            "backgroundColor" to PartConfig(body = backgroundColor, headers = mutableMapOf()),
            "textColor" to PartConfig(body = textColor, headers = mutableMapOf()),
            "fontFamily" to PartConfig(body = fontFamily, headers = mutableMapOf()),
            "fontSize" to PartConfig(body = fontSize, headers = mutableMapOf()),
            "textAlignment" to PartConfig(body = textAlignment.value, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/design",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
