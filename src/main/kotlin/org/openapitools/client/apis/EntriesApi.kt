/**
 * Mindwell
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient

import org.openapitools.client.models.AdjacentEntries
import org.openapitools.client.models.Entry
import org.openapitools.client.models.Error
import org.openapitools.client.models.Feed
import org.openapitools.client.models.TagList

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class EntriesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v1")
        }
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param query  (optional)
     * @return Feed
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesAnonymousGet(limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null, tag: kotlin.String? = null, query: kotlin.String? = null) : Feed {
        val localVarResponse = entriesAnonymousGetWithHttpInfo(limit = limit, after = after, before = before, tag = tag, query = query)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Feed
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param query  (optional)
     * @return ApiResponse<Feed?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesAnonymousGetWithHttpInfo(limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, tag: kotlin.String?, query: kotlin.String?) : ApiResponse<Feed?> {
        val localVariableConfig = entriesAnonymousGetRequestConfig(limit = limit, after = after, before = before, tag = tag, query = query)

        return request<Unit, Feed>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesAnonymousGet
     *
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param query  (optional)
     * @return RequestConfig
     */
    fun entriesAnonymousGetRequestConfig(limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, tag: kotlin.String?, query: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
                if (tag != null) {
                    put("tag", listOf(tag.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/entries/anonymous",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param content 
     * @param title  (optional)
     * @param images  (optional)
     * @param tags  (optional)
     * @param anonymousComments  (optional, default to false)
     * @return Entry
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesAnonymousPost(content: kotlin.String, title: kotlin.String? = null, images: kotlin.collections.Set<kotlin.Long>? = null, tags: kotlin.collections.Set<kotlin.String>? = null, anonymousComments: kotlin.Boolean? = false) : Entry {
        val localVarResponse = entriesAnonymousPostWithHttpInfo(content = content, title = title, images = images, tags = tags, anonymousComments = anonymousComments)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Entry
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param content 
     * @param title  (optional)
     * @param images  (optional)
     * @param tags  (optional)
     * @param anonymousComments  (optional, default to false)
     * @return ApiResponse<Entry?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesAnonymousPostWithHttpInfo(content: kotlin.String, title: kotlin.String?, images: kotlin.collections.Set<kotlin.Long>?, tags: kotlin.collections.Set<kotlin.String>?, anonymousComments: kotlin.Boolean?) : ApiResponse<Entry?> {
        val localVariableConfig = entriesAnonymousPostRequestConfig(content = content, title = title, images = images, tags = tags, anonymousComments = anonymousComments)

        return request<Map<String, PartConfig<*>>, Entry>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesAnonymousPost
     *
     * @param content 
     * @param title  (optional)
     * @param images  (optional)
     * @param tags  (optional)
     * @param anonymousComments  (optional, default to false)
     * @return RequestConfig
     */
    fun entriesAnonymousPostRequestConfig(content: kotlin.String, title: kotlin.String?, images: kotlin.collections.Set<kotlin.Long>?, tags: kotlin.collections.Set<kotlin.String>?, anonymousComments: kotlin.Boolean?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "title" to PartConfig(body = title, headers = mutableMapOf()),
            "content" to PartConfig(body = content, headers = mutableMapOf()),
            "images" to PartConfig(body = images, headers = mutableMapOf()),
            "tags" to PartConfig(body = tags, headers = mutableMapOf()),
            "anonymous_comments" to PartConfig(body = anonymousComments, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/entries/anonymous",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter category
     */
     enum class Category_entriesBestGet(val value: kotlin.String) {
         @Json(name = "month") month("month"),
         @Json(name = "week") week("week")
     }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param tag  (optional)
     * @param query  (optional)
     * @param category  (optional, default to month)
     * @return Feed
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesBestGet(limit: kotlin.Int? = 30, tag: kotlin.String? = null, query: kotlin.String? = null, category: Category_entriesBestGet? = month) : Feed {
        val localVarResponse = entriesBestGetWithHttpInfo(limit = limit, tag = tag, query = query, category = category)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Feed
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param tag  (optional)
     * @param query  (optional)
     * @param category  (optional, default to month)
     * @return ApiResponse<Feed?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesBestGetWithHttpInfo(limit: kotlin.Int?, tag: kotlin.String?, query: kotlin.String?, category: Category_entriesBestGet?) : ApiResponse<Feed?> {
        val localVariableConfig = entriesBestGetRequestConfig(limit = limit, tag = tag, query = query, category = category)

        return request<Unit, Feed>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesBestGet
     *
     * @param limit  (optional, default to 30)
     * @param tag  (optional)
     * @param query  (optional)
     * @param category  (optional, default to month)
     * @return RequestConfig
     */
    fun entriesBestGetRequestConfig(limit: kotlin.Int?, tag: kotlin.String?, query: kotlin.String?, category: Category_entriesBestGet?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (tag != null) {
                    put("tag", listOf(tag.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (category != null) {
                    put("category", listOf(category.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/entries/best",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param query  (optional)
     * @return Feed
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesFriendsGet(limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null, tag: kotlin.String? = null, query: kotlin.String? = null) : Feed {
        val localVarResponse = entriesFriendsGetWithHttpInfo(limit = limit, after = after, before = before, tag = tag, query = query)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Feed
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param query  (optional)
     * @return ApiResponse<Feed?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesFriendsGetWithHttpInfo(limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, tag: kotlin.String?, query: kotlin.String?) : ApiResponse<Feed?> {
        val localVariableConfig = entriesFriendsGetRequestConfig(limit = limit, after = after, before = before, tag = tag, query = query)

        return request<Unit, Feed>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesFriendsGet
     *
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param query  (optional)
     * @return RequestConfig
     */
    fun entriesFriendsGetRequestConfig(limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, tag: kotlin.String?, query: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
                if (tag != null) {
                    put("tag", listOf(tag.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/entries/friends",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id 
     * @return AdjacentEntries
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesIdAdjacentGet(id: kotlin.Long) : AdjacentEntries {
        val localVarResponse = entriesIdAdjacentGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdjacentEntries
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id 
     * @return ApiResponse<AdjacentEntries?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesIdAdjacentGetWithHttpInfo(id: kotlin.Long) : ApiResponse<AdjacentEntries?> {
        val localVariableConfig = entriesIdAdjacentGetRequestConfig(id = id)

        return request<Unit, AdjacentEntries>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesIdAdjacentGet
     *
     * @param id 
     * @return RequestConfig
     */
    fun entriesIdAdjacentGetRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/entries/{id}/adjacent".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id 
     * @param content  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesIdComplainPost(id: kotlin.Long, content: kotlin.String? = null) : Unit {
        val localVarResponse = entriesIdComplainPostWithHttpInfo(id = id, content = content)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id 
     * @param content  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesIdComplainPostWithHttpInfo(id: kotlin.Long, content: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = entriesIdComplainPostRequestConfig(id = id, content = content)

        return request<Map<String, PartConfig<*>>, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesIdComplainPost
     *
     * @param id 
     * @param content  (optional)
     * @return RequestConfig
     */
    fun entriesIdComplainPostRequestConfig(id: kotlin.Long, content: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "content" to PartConfig(body = content, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/entries/{id}/complain".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesIdDelete(id: kotlin.Long) : Unit {
        val localVarResponse = entriesIdDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesIdDeleteWithHttpInfo(id: kotlin.Long) : ApiResponse<Unit?> {
        val localVariableConfig = entriesIdDeleteRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesIdDelete
     *
     * @param id 
     * @return RequestConfig
     */
    fun entriesIdDeleteRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/entries/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id 
     * @return Entry
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesIdGet(id: kotlin.Long) : Entry {
        val localVarResponse = entriesIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Entry
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id 
     * @return ApiResponse<Entry?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesIdGetWithHttpInfo(id: kotlin.Long) : ApiResponse<Entry?> {
        val localVariableConfig = entriesIdGetRequestConfig(id = id)

        return request<Unit, Entry>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesIdGet
     *
     * @param id 
     * @return RequestConfig
     */
    fun entriesIdGetRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/entries/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter privacy
     */
     enum class Privacy_entriesIdPut(val value: kotlin.String) {
         @Json(name = "all") all("all"),
         @Json(name = "registered") registered("registered"),
         @Json(name = "invited") invited("invited"),
         @Json(name = "followers") followers("followers"),
         @Json(name = "some") some("some"),
         @Json(name = "me") me("me"),
         @Json(name = "anonymous") anonymous("anonymous")
     }

    /**
     * 
     * 
     * @param id 
     * @param content 
     * @param privacy 
     * @param title  (optional)
     * @param images  (optional)
     * @param tags  (optional)
     * @param visibleFor  (optional)
     * @param isCommentable  (optional, default to true)
     * @param isVotable  (optional, default to false)
     * @param inLive  (optional, default to false)
     * @param anonymousComments  (optional, default to false)
     * @return Entry
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesIdPut(id: kotlin.Long, content: kotlin.String, privacy: Privacy_entriesIdPut, title: kotlin.String? = null, images: kotlin.collections.Set<kotlin.Long>? = null, tags: kotlin.collections.Set<kotlin.String>? = null, visibleFor: kotlin.collections.List<kotlin.Long>? = null, isCommentable: kotlin.Boolean? = true, isVotable: kotlin.Boolean? = false, inLive: kotlin.Boolean? = false, anonymousComments: kotlin.Boolean? = false) : Entry {
        val localVarResponse = entriesIdPutWithHttpInfo(id = id, content = content, privacy = privacy, title = title, images = images, tags = tags, visibleFor = visibleFor, isCommentable = isCommentable, isVotable = isVotable, inLive = inLive, anonymousComments = anonymousComments)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Entry
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id 
     * @param content 
     * @param privacy 
     * @param title  (optional)
     * @param images  (optional)
     * @param tags  (optional)
     * @param visibleFor  (optional)
     * @param isCommentable  (optional, default to true)
     * @param isVotable  (optional, default to false)
     * @param inLive  (optional, default to false)
     * @param anonymousComments  (optional, default to false)
     * @return ApiResponse<Entry?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesIdPutWithHttpInfo(id: kotlin.Long, content: kotlin.String, privacy: Privacy_entriesIdPut, title: kotlin.String?, images: kotlin.collections.Set<kotlin.Long>?, tags: kotlin.collections.Set<kotlin.String>?, visibleFor: kotlin.collections.List<kotlin.Long>?, isCommentable: kotlin.Boolean?, isVotable: kotlin.Boolean?, inLive: kotlin.Boolean?, anonymousComments: kotlin.Boolean?) : ApiResponse<Entry?> {
        val localVariableConfig = entriesIdPutRequestConfig(id = id, content = content, privacy = privacy, title = title, images = images, tags = tags, visibleFor = visibleFor, isCommentable = isCommentable, isVotable = isVotable, inLive = inLive, anonymousComments = anonymousComments)

        return request<Map<String, PartConfig<*>>, Entry>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesIdPut
     *
     * @param id 
     * @param content 
     * @param privacy 
     * @param title  (optional)
     * @param images  (optional)
     * @param tags  (optional)
     * @param visibleFor  (optional)
     * @param isCommentable  (optional, default to true)
     * @param isVotable  (optional, default to false)
     * @param inLive  (optional, default to false)
     * @param anonymousComments  (optional, default to false)
     * @return RequestConfig
     */
    fun entriesIdPutRequestConfig(id: kotlin.Long, content: kotlin.String, privacy: Privacy_entriesIdPut, title: kotlin.String?, images: kotlin.collections.Set<kotlin.Long>?, tags: kotlin.collections.Set<kotlin.String>?, visibleFor: kotlin.collections.List<kotlin.Long>?, isCommentable: kotlin.Boolean?, isVotable: kotlin.Boolean?, inLive: kotlin.Boolean?, anonymousComments: kotlin.Boolean?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "title" to PartConfig(body = title, headers = mutableMapOf()),
            "content" to PartConfig(body = content, headers = mutableMapOf()),
            "images" to PartConfig(body = images, headers = mutableMapOf()),
            "tags" to PartConfig(body = tags, headers = mutableMapOf()),
            "privacy" to PartConfig(body = privacy.value, headers = mutableMapOf()),
            "visibleFor" to PartConfig(body = visibleFor, headers = mutableMapOf()),
            "isCommentable" to PartConfig(body = isCommentable, headers = mutableMapOf()),
            "isVotable" to PartConfig(body = isVotable, headers = mutableMapOf()),
            "inLive" to PartConfig(body = inLive, headers = mutableMapOf()),
            "anonymous_comments" to PartConfig(body = anonymousComments, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/entries/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter section
     */
     enum class Section_entriesLiveGet(val value: kotlin.String) {
         @Json(name = "entries") entries("entries"),
         @Json(name = "comments") comments("comments"),
         @Json(name = "waiting") waiting("waiting")
     }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param query  (optional)
     * @param section  (optional, default to entries)
     * @return Feed
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesLiveGet(limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null, tag: kotlin.String? = null, query: kotlin.String? = null, section: Section_entriesLiveGet? = entries) : Feed {
        val localVarResponse = entriesLiveGetWithHttpInfo(limit = limit, after = after, before = before, tag = tag, query = query, section = section)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Feed
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param query  (optional)
     * @param section  (optional, default to entries)
     * @return ApiResponse<Feed?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesLiveGetWithHttpInfo(limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, tag: kotlin.String?, query: kotlin.String?, section: Section_entriesLiveGet?) : ApiResponse<Feed?> {
        val localVariableConfig = entriesLiveGetRequestConfig(limit = limit, after = after, before = before, tag = tag, query = query, section = section)

        return request<Unit, Feed>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesLiveGet
     *
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param query  (optional)
     * @param section  (optional, default to entries)
     * @return RequestConfig
     */
    fun entriesLiveGetRequestConfig(limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, tag: kotlin.String?, query: kotlin.String?, section: Section_entriesLiveGet?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
                if (tag != null) {
                    put("tag", listOf(tag.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (section != null) {
                    put("section", listOf(section.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/entries/live",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @return Entry
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesRandomGet() : Entry {
        val localVarResponse = entriesRandomGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Entry
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @return ApiResponse<Entry?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesRandomGetWithHttpInfo() : ApiResponse<Entry?> {
        val localVariableConfig = entriesRandomGetRequestConfig()

        return request<Unit, Entry>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesRandomGet
     *
     * @return RequestConfig
     */
    fun entriesRandomGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/entries/random",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @return TagList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesTagsGet(limit: kotlin.Int? = 30) : TagList {
        val localVarResponse = entriesTagsGetWithHttpInfo(limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TagList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @return ApiResponse<TagList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesTagsGetWithHttpInfo(limit: kotlin.Int?) : ApiResponse<TagList?> {
        val localVariableConfig = entriesTagsGetRequestConfig(limit = limit)

        return request<Unit, TagList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesTagsGet
     *
     * @param limit  (optional, default to 30)
     * @return RequestConfig
     */
    fun entriesTagsGetRequestConfig(limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/entries/tags",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return Feed
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entriesWatchingGet(limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null) : Feed {
        val localVarResponse = entriesWatchingGetWithHttpInfo(limit = limit, after = after, before = before)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Feed
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return ApiResponse<Feed?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun entriesWatchingGetWithHttpInfo(limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : ApiResponse<Feed?> {
        val localVariableConfig = entriesWatchingGetRequestConfig(limit = limit, after = after, before = before)

        return request<Unit, Feed>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation entriesWatchingGet
     *
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return RequestConfig
     */
    fun entriesWatchingGetRequestConfig(limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/entries/watching",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
