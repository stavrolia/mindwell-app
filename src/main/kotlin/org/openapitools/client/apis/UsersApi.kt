/**
 * Mindwell
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient

import org.openapitools.client.models.Calendar
import org.openapitools.client.models.Error
import org.openapitools.client.models.Feed
import org.openapitools.client.models.FriendList
import org.openapitools.client.models.ImageList
import org.openapitools.client.models.Profile
import org.openapitools.client.models.TagList
import org.openapitools.client.models.UsersGet200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class UsersApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v1")
        }
    }

    /**
     * enum for parameter top
     */
     enum class Top_usersGet(val value: kotlin.String) {
         @Json(name = "new") new("new"),
         @Json(name = "rank") rank("rank"),
         @Json(name = "waiting") waiting("waiting")
     }

    /**
     * 
     * 
     * @param top  (optional, default to new)
     * @param query  (optional)
     * @return UsersGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersGet(top: Top_usersGet? = new, query: kotlin.String? = null) : UsersGet200Response {
        val localVarResponse = usersGetWithHttpInfo(top = top, query = query)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param top  (optional, default to new)
     * @param query  (optional)
     * @return ApiResponse<UsersGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersGetWithHttpInfo(top: Top_usersGet?, query: kotlin.String?) : ApiResponse<UsersGet200Response?> {
        val localVariableConfig = usersGetRequestConfig(top = top, query = query)

        return request<Unit, UsersGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersGet
     *
     * @param top  (optional, default to new)
     * @param query  (optional)
     * @return RequestConfig
     */
    fun usersGetRequestConfig(top: Top_usersGet?, query: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (top != null) {
                    put("top", listOf(top.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param start  (optional, default to 0)
     * @param end  (optional, default to 0)
     * @param limit  (optional, default to 1000)
     * @return Calendar
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersNameCalendarGet(name: kotlin.String, start: kotlin.Long? = 0, end: kotlin.Long? = 0, limit: kotlin.Int? = 1000) : Calendar {
        val localVarResponse = usersNameCalendarGetWithHttpInfo(name = name, start = start, end = end, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Calendar
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param start  (optional, default to 0)
     * @param end  (optional, default to 0)
     * @param limit  (optional, default to 1000)
     * @return ApiResponse<Calendar?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersNameCalendarGetWithHttpInfo(name: kotlin.String, start: kotlin.Long?, end: kotlin.Long?, limit: kotlin.Int?) : ApiResponse<Calendar?> {
        val localVariableConfig = usersNameCalendarGetRequestConfig(name = name, start = start, end = end, limit = limit)

        return request<Unit, Calendar>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersNameCalendarGet
     *
     * @param name 
     * @param start  (optional, default to 0)
     * @param end  (optional, default to 0)
     * @param limit  (optional, default to 1000)
     * @return RequestConfig
     */
    fun usersNameCalendarGetRequestConfig(name: kotlin.String, start: kotlin.Long?, end: kotlin.Long?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (end != null) {
                    put("end", listOf(end.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{name}/calendar".replace("{"+"name"+"}", name.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param query  (optional)
     * @return Feed
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersNameFavoritesGet(name: kotlin.String, limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null, query: kotlin.String? = null) : Feed {
        val localVarResponse = usersNameFavoritesGetWithHttpInfo(name = name, limit = limit, after = after, before = before, query = query)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Feed
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param query  (optional)
     * @return ApiResponse<Feed?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersNameFavoritesGetWithHttpInfo(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, query: kotlin.String?) : ApiResponse<Feed?> {
        val localVariableConfig = usersNameFavoritesGetRequestConfig(name = name, limit = limit, after = after, before = before, query = query)

        return request<Unit, Feed>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersNameFavoritesGet
     *
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param query  (optional)
     * @return RequestConfig
     */
    fun usersNameFavoritesGetRequestConfig(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, query: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{name}/favorites".replace("{"+"name"+"}", name.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return FriendList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersNameFollowersGet(name: kotlin.String, limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null) : FriendList {
        val localVarResponse = usersNameFollowersGetWithHttpInfo(name = name, limit = limit, after = after, before = before)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FriendList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return ApiResponse<FriendList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersNameFollowersGetWithHttpInfo(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : ApiResponse<FriendList?> {
        val localVariableConfig = usersNameFollowersGetRequestConfig(name = name, limit = limit, after = after, before = before)

        return request<Unit, FriendList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersNameFollowersGet
     *
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return RequestConfig
     */
    fun usersNameFollowersGetRequestConfig(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{name}/followers".replace("{"+"name"+"}", name.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return FriendList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersNameFollowingsGet(name: kotlin.String, limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null) : FriendList {
        val localVarResponse = usersNameFollowingsGetWithHttpInfo(name = name, limit = limit, after = after, before = before)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FriendList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return ApiResponse<FriendList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersNameFollowingsGetWithHttpInfo(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : ApiResponse<FriendList?> {
        val localVariableConfig = usersNameFollowingsGetRequestConfig(name = name, limit = limit, after = after, before = before)

        return request<Unit, FriendList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersNameFollowingsGet
     *
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return RequestConfig
     */
    fun usersNameFollowingsGetRequestConfig(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{name}/followings".replace("{"+"name"+"}", name.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @return Profile
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersNameGet(name: kotlin.String) : Profile {
        val localVarResponse = usersNameGetWithHttpInfo(name = name)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Profile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @return ApiResponse<Profile?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersNameGetWithHttpInfo(name: kotlin.String) : ApiResponse<Profile?> {
        val localVariableConfig = usersNameGetRequestConfig(name = name)

        return request<Unit, Profile>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersNameGet
     *
     * @param name 
     * @return RequestConfig
     */
    fun usersNameGetRequestConfig(name: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{name}".replace("{"+"name"+"}", name.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return ImageList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersNameImagesGet(name: kotlin.String, limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null) : ImageList {
        val localVarResponse = usersNameImagesGetWithHttpInfo(name = name, limit = limit, after = after, before = before)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ImageList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return ApiResponse<ImageList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersNameImagesGetWithHttpInfo(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : ApiResponse<ImageList?> {
        val localVariableConfig = usersNameImagesGetRequestConfig(name = name, limit = limit, after = after, before = before)

        return request<Unit, ImageList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersNameImagesGet
     *
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return RequestConfig
     */
    fun usersNameImagesGetRequestConfig(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{name}/images".replace("{"+"name"+"}", name.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return FriendList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersNameInvitedGet(name: kotlin.String, limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null) : FriendList {
        val localVarResponse = usersNameInvitedGetWithHttpInfo(name = name, limit = limit, after = after, before = before)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FriendList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return ApiResponse<FriendList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersNameInvitedGetWithHttpInfo(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : ApiResponse<FriendList?> {
        val localVariableConfig = usersNameInvitedGetRequestConfig(name = name, limit = limit, after = after, before = before)

        return request<Unit, FriendList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersNameInvitedGet
     *
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @return RequestConfig
     */
    fun usersNameInvitedGetRequestConfig(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{name}/invited".replace("{"+"name"+"}", name.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @return TagList
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersNameTagsGet(name: kotlin.String, limit: kotlin.Int? = 30) : TagList {
        val localVarResponse = usersNameTagsGetWithHttpInfo(name = name, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TagList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @return ApiResponse<TagList?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersNameTagsGetWithHttpInfo(name: kotlin.String, limit: kotlin.Int?) : ApiResponse<TagList?> {
        val localVariableConfig = usersNameTagsGetRequestConfig(name = name, limit = limit)

        return request<Unit, TagList>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersNameTagsGet
     *
     * @param name 
     * @param limit  (optional, default to 30)
     * @return RequestConfig
     */
    fun usersNameTagsGetRequestConfig(name: kotlin.String, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{name}/tags".replace("{"+"name"+"}", name.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sort
     */
     enum class Sort_usersNameTlogGet(val value: kotlin.String) {
         @Json(name = "new") new("new"),
         @Json(name = "old") old("old"),
         @Json(name = "best") best("best")
     }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param sort  (optional, default to new)
     * @param query  (optional)
     * @return Feed
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersNameTlogGet(name: kotlin.String, limit: kotlin.Int? = 30, after: kotlin.String? = null, before: kotlin.String? = null, tag: kotlin.String? = null, sort: Sort_usersNameTlogGet? = new, query: kotlin.String? = null) : Feed {
        val localVarResponse = usersNameTlogGetWithHttpInfo(name = name, limit = limit, after = after, before = before, tag = tag, sort = sort, query = query)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Feed
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param sort  (optional, default to new)
     * @param query  (optional)
     * @return ApiResponse<Feed?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersNameTlogGetWithHttpInfo(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, tag: kotlin.String?, sort: Sort_usersNameTlogGet?, query: kotlin.String?) : ApiResponse<Feed?> {
        val localVariableConfig = usersNameTlogGetRequestConfig(name = name, limit = limit, after = after, before = before, tag = tag, sort = sort, query = query)

        return request<Unit, Feed>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersNameTlogGet
     *
     * @param name 
     * @param limit  (optional, default to 30)
     * @param after  (optional)
     * @param before  (optional)
     * @param tag  (optional)
     * @param sort  (optional, default to new)
     * @param query  (optional)
     * @return RequestConfig
     */
    fun usersNameTlogGetRequestConfig(name: kotlin.String, limit: kotlin.Int?, after: kotlin.String?, before: kotlin.String?, tag: kotlin.String?, sort: Sort_usersNameTlogGet?, query: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(after.toString()))
                }
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
                if (tag != null) {
                    put("tag", listOf(tag.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{name}/tlog".replace("{"+"name"+"}", name.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
