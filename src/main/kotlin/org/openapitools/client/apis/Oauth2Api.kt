/**
 * Mindwell
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient

import org.openapitools.client.models.App
import org.openapitools.client.models.Error
import org.openapitools.client.models.OAuth2Error
import org.openapitools.client.models.OAuth2Token
import org.openapitools.client.models.Oauth2AllowPost200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class Oauth2Api(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api/v1")
        }
    }

    /**
     * enum for parameter responseType
     */
     enum class ResponseType_oauth2AllowPost(val value: kotlin.String) {
         @Json(name = "code") code("code")
     }

    /**
     * enum for parameter codeChallengeMethod
     */
     enum class CodeChallengeMethod_oauth2AllowPost(val value: kotlin.String) {
         @Json(name = "plain") plain("plain"),
         @Json(name = "S256") s256("S256")
     }

    /**
     * only for internal usage
     * 
     * @param responseType 
     * @param clientId 
     * @param redirectUri 
     * @param scope 
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @return Oauth2AllowPost200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oauth2AllowPost(responseType: ResponseType_oauth2AllowPost, clientId: kotlin.Int, redirectUri: kotlin.String, scope: kotlin.collections.List<kotlin.String>, state: kotlin.String? = null, codeChallenge: kotlin.String? = null, codeChallengeMethod: CodeChallengeMethod_oauth2AllowPost? = null) : Oauth2AllowPost200Response {
        val localVarResponse = oauth2AllowPostWithHttpInfo(responseType = responseType, clientId = clientId, redirectUri = redirectUri, scope = scope, state = state, codeChallenge = codeChallenge, codeChallengeMethod = codeChallengeMethod)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Oauth2AllowPost200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * only for internal usage
     * 
     * @param responseType 
     * @param clientId 
     * @param redirectUri 
     * @param scope 
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @return ApiResponse<Oauth2AllowPost200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oauth2AllowPostWithHttpInfo(responseType: ResponseType_oauth2AllowPost, clientId: kotlin.Int, redirectUri: kotlin.String, scope: kotlin.collections.List<kotlin.String>, state: kotlin.String?, codeChallenge: kotlin.String?, codeChallengeMethod: CodeChallengeMethod_oauth2AllowPost?) : ApiResponse<Oauth2AllowPost200Response?> {
        val localVariableConfig = oauth2AllowPostRequestConfig(responseType = responseType, clientId = clientId, redirectUri = redirectUri, scope = scope, state = state, codeChallenge = codeChallenge, codeChallengeMethod = codeChallengeMethod)

        return request<Map<String, PartConfig<*>>, Oauth2AllowPost200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oauth2AllowPost
     *
     * @param responseType 
     * @param clientId 
     * @param redirectUri 
     * @param scope 
     * @param state  (optional)
     * @param codeChallenge  (optional)
     * @param codeChallengeMethod  (optional)
     * @return RequestConfig
     */
    fun oauth2AllowPostRequestConfig(responseType: ResponseType_oauth2AllowPost, clientId: kotlin.Int, redirectUri: kotlin.String, scope: kotlin.collections.List<kotlin.String>, state: kotlin.String?, codeChallenge: kotlin.String?, codeChallengeMethod: CodeChallengeMethod_oauth2AllowPost?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "response_type" to PartConfig(body = responseType.value, headers = mutableMapOf()),
            "client_id" to PartConfig(body = clientId, headers = mutableMapOf()),
            "redirect_uri" to PartConfig(body = redirectUri, headers = mutableMapOf()),
            "scope" to PartConfig(body = scope, headers = mutableMapOf()),
            "state" to PartConfig(body = state, headers = mutableMapOf()),
            "code_challenge" to PartConfig(body = codeChallenge, headers = mutableMapOf()),
            "code_challenge_method" to PartConfig(body = codeChallengeMethod.value, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/oauth2/allow",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id 
     * @return App
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oauth2AppsIdGet(id: kotlin.Long) : App {
        val localVarResponse = oauth2AppsIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as App
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id 
     * @return ApiResponse<App?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oauth2AppsIdGetWithHttpInfo(id: kotlin.Long) : ApiResponse<App?> {
        val localVariableConfig = oauth2AppsIdGetRequestConfig(id = id)

        return request<Unit, App>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oauth2AppsIdGet
     *
     * @param id 
     * @return RequestConfig
     */
    fun oauth2AppsIdGetRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/oauth2/apps/{id}".replace("{"+"id"+"}", id.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * only for internal usage
     * 
     * @param clientId 
     * @param redirectUri 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oauth2DenyGet(clientId: kotlin.Int, redirectUri: kotlin.String) : Unit {
        val localVarResponse = oauth2DenyGetWithHttpInfo(clientId = clientId, redirectUri = redirectUri)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * only for internal usage
     * 
     * @param clientId 
     * @param redirectUri 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun oauth2DenyGetWithHttpInfo(clientId: kotlin.Int, redirectUri: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = oauth2DenyGetRequestConfig(clientId = clientId, redirectUri = redirectUri)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oauth2DenyGet
     *
     * @param clientId 
     * @param redirectUri 
     * @return RequestConfig
     */
    fun oauth2DenyGetRequestConfig(clientId: kotlin.Int, redirectUri: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("client_id", listOf(clientId.toString()))
                put("redirect_uri", listOf(redirectUri.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/oauth2/deny",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter grantType
     */
     enum class GrantType_oauth2TokenPost(val value: kotlin.String) {
         @Json(name = "authorization_code") authorizationCode("authorization_code"),
         @Json(name = "client_credentials") clientCredentials("client_credentials"),
         @Json(name = "password") password("password"),
         @Json(name = "refresh_token") refreshToken("refresh_token")
     }

    /**
     * 
     * 
     * @param grantType 
     * @param clientId 
     * @param clientSecret  (optional)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param codeVerifier  (optional)
     * @param refreshToken  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @return OAuth2Token
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oauth2TokenPost(grantType: GrantType_oauth2TokenPost, clientId: kotlin.Int, clientSecret: kotlin.String? = null, code: kotlin.String? = null, redirectUri: kotlin.String? = null, codeVerifier: kotlin.String? = null, refreshToken: kotlin.String? = null, username: kotlin.String? = null, password: kotlin.String? = null) : OAuth2Token {
        val localVarResponse = oauth2TokenPostWithHttpInfo(grantType = grantType, clientId = clientId, clientSecret = clientSecret, code = code, redirectUri = redirectUri, codeVerifier = codeVerifier, refreshToken = refreshToken, username = username, password = password)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OAuth2Token
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param grantType 
     * @param clientId 
     * @param clientSecret  (optional)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param codeVerifier  (optional)
     * @param refreshToken  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @return ApiResponse<OAuth2Token?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oauth2TokenPostWithHttpInfo(grantType: GrantType_oauth2TokenPost, clientId: kotlin.Int, clientSecret: kotlin.String?, code: kotlin.String?, redirectUri: kotlin.String?, codeVerifier: kotlin.String?, refreshToken: kotlin.String?, username: kotlin.String?, password: kotlin.String?) : ApiResponse<OAuth2Token?> {
        val localVariableConfig = oauth2TokenPostRequestConfig(grantType = grantType, clientId = clientId, clientSecret = clientSecret, code = code, redirectUri = redirectUri, codeVerifier = codeVerifier, refreshToken = refreshToken, username = username, password = password)

        return request<Map<String, PartConfig<*>>, OAuth2Token>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oauth2TokenPost
     *
     * @param grantType 
     * @param clientId 
     * @param clientSecret  (optional)
     * @param code  (optional)
     * @param redirectUri  (optional)
     * @param codeVerifier  (optional)
     * @param refreshToken  (optional)
     * @param username  (optional)
     * @param password  (optional)
     * @return RequestConfig
     */
    fun oauth2TokenPostRequestConfig(grantType: GrantType_oauth2TokenPost, clientId: kotlin.Int, clientSecret: kotlin.String?, code: kotlin.String?, redirectUri: kotlin.String?, codeVerifier: kotlin.String?, refreshToken: kotlin.String?, username: kotlin.String?, password: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "grant_type" to PartConfig(body = grantType.value, headers = mutableMapOf()),
            "client_id" to PartConfig(body = clientId, headers = mutableMapOf()),
            "client_secret" to PartConfig(body = clientSecret, headers = mutableMapOf()),
            "code" to PartConfig(body = code, headers = mutableMapOf()),
            "redirect_uri" to PartConfig(body = redirectUri, headers = mutableMapOf()),
            "code_verifier" to PartConfig(body = codeVerifier, headers = mutableMapOf()),
            "refresh_token" to PartConfig(body = refreshToken, headers = mutableMapOf()),
            "username" to PartConfig(body = username, headers = mutableMapOf()),
            "password" to PartConfig(body = password, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/oauth2/token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
